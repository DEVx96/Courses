# -*- coding: utf-8 -*-
"""CAMVID.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pNplA8XKgyQCFJ4W2fECUe-_dVE1rgO9
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %reload_ext autoreload
# %autoreload 2

from fastai.vision import *

path = untar_data(URLs.CAMVID)
path.ls()

codes = np.loadtxt(path/'codes.txt',dtype='str')

codes.shape,codes

path_img = path/'images'
path_lbl = path/'labels'
path_img.ls()[:5],path_lbl.ls()[:5]

val = np.loadtxt(path/'valid.txt',dtype='str')

df = pd.DataFrame(val)
df.head()

def y_func(x): return path_lbl/f'{x.stem}_P{x.suffix}'

mask = path_lbl.ls()[0]
mask = open_mask(mask)
mask.show(figsize=(5,5))

img_sam = path_img.ls()[0]
img = open_image(img_sam)
img.show(figsize=(5,5))

mask_sam = y_func(img_sam)
mask = open_mask(mask_sam)
mask.show(figsize=(5,5))

size = np.array(mask.shape[1:])
src_size = size//2
src_size,size

src = SegmentationItemList.from_folder(path_img).split_by_files(valid_names = val).label_from_func(y_func,classes=codes)

def get_data(size,bs):
  return src.transform(get_transforms(),size=size,tfm_y=True).databunch(bs=bs).normalize(imagenet_stats)

data =  get_data(src_size,bs=8)

data.show_batch(3,figsize=(8,8))

name2id = {a:b for b,a in enumerate(codes)}
void = name2id['Void']
def acc_camvid(input,target):
  target = target.squeeze(1)
  mask = target != void
  return (input.argmax(1)[mask] == target[mask]).float().mean()

metrics = acc_camvid

learn = unet_learner(data,models.resnet34,metrics=metrics,wd=1e-02)

learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(10,slice(1e-03))

learn.save('small')

learn.unfreeze()

learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(8,slice(4e-06,4e-04))

learn.save('small')

data = get_data(size,bs=3)

learn.destroy()

learn = unet_learner(data,models.resnet34,metrics=metrics,wd=1e-02)

learn.load('small')

learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(8,1e-03)

learn.save('Big')

learn.unfreeze()

learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(8,slice(2e-06,1e-04))

