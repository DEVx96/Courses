# -*- coding: utf-8 -*-
"""Pets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uQjPzwVzWDytOtBMRHqO1-LlvxVVNqOp
"""

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

from fastai.vision import *

path = untar_data(URLs.PETS)
path.ls()

path_img = path/'images'
path_img.ls()[:5]

pat = r'/([^/]+)_\d+.jpg$'
src = ImageList.from_folder(path_img).split_by_rand_pct().label_from_re(pat)

bs = 48
def get_data(size,bs,padding_mode = 'reflection'):
  return src.transform(get_transforms(),padding_mode = padding_mode,size=size).databunch(bs=bs).normalize(imagenet_stats)

data = get_data(224,48,padding_mode= 'zeros')

data.show_batch(3,figsize=(6,6))

def _plot(x,y,ax):
  data.train_ds[0][0].show(ax,y=data.train_ds[0][1])

plot_multi(_plot,3,3,figsize=(8,8))

data = get_data(224,48)

plot_multi(_plot,3,3,figsize=(8,8))

"""Training"""

learn = cnn_learner(data,models.resnet34,metrics = accuracy,bn_final=True)

learn.lr_find(end_lr=100)
learn.recorder.plot()

learn.fit_one_cycle(3,slice(1e-02),pct_start=0.8)

learn.unfreeze()
learn.lr_find()
learn.recorder.plot()

learn.fit_one_cycle(3,slice(1e-06,1e-04),pct_start=0.8)

learn.save('model-1')

data = get_data(352,bs)
learn.data = data

learn.unfreeze()
learn.fit_one_cycle(3,slice(1e-06,1e-04),pct_start = 0.8)

learn.save('Model')

"""Convolutions"""

data = get_data(352,16)

x,y = data.train_ds[0]
x.shape

k = torch.Tensor([[0,5/3,1.],
      [5/3,5/3,-1.],
      [-1.,-1.,-1.]]).expand(1,3,3,3)/6
k,k.shape

x.show()

conv = F.conv2d(t[None],k)

show_image(conv[0],figsize=(4,4))

print(learn.summary())

learn.model

"""Heatmap"""

m = learn.model.eval()

xb,_ = data.one_item(x)
xb_im = Image(data.denorm(xb[0]))
xb = xb.cuda()

xb_im

xb.shape

from fastai.callbacks.hooks import *

def hooked_backward(cat=y):
  with hook_output(m[0]) as hook_a: 
    with hook_output(m[0], grad=True) as hook_g:
      preds = m(xb)
      preds[0,int(cat)].backward()
  return hook_a,hook_g

hook_a,hook_g = hooked_backward()

acts = hook_a.stored[0].cpu()
acts.shape

avg_act = acts.mean(0)
avg_act.shape

def show_heatmap(hm):
  _,ax = plt.subplots()
  xb_im.show(ax)
  ax.imshow(hm,alpha=0.5,interpolation='bilinear',cmap='plasma',extent=(0,352,352,0))

show_heatmap(avg_act)

"""Gradient-Cam"""

grad = hook_g.stored[0][0].cpu()
grad_chan = grad.mean(1).mean(1)
grad.shape,grad_chan.shape

mult = (acts*grad_chan[...,None,None]).mean(0)

show_heatmap(mult)

x,y = data.valid_ds[5]
xb,_  = data.one_item(x)
xb_img = Image(data.denorm(xb[0]))
xb = xb.cuda()

xb_img.show()

hook_a,hook_g = hooked_backward()

acts = hook_a.stored[0].cpu()
grad = hook_g.stored[0][0].cpu()

grad_chan = grad.mean(1).mean(1)
mult = (acts*grad_chan[...,None,None]).mean(0)

show_heatmap(mult)

